{"version":3,"sources":["Cell.jsx","Grid.jsx","App.js","reportWebVitals.js","index.js"],"names":["Cell","props","className","alive","Row","cells","map","cell","index","Grid","useState","grid","i","row","Array","from","length","Math","floor","random","push","generateGrid","setGrid","sum","a","b","onClick","newState","rowIdx","cellIdx","surroundings","x","y","forEach","n","inputArr","outputArr","undefined","tryToAdd","numberOfNeighbors","reduce","livesOrDies","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sRAQeA,EALF,SAACC,GAEZ,OADa,qBAAKC,UAAS,eAAUD,EAAME,MAAQ,QAAU,OCAzDC,G,MAAM,SAACH,GACX,OACE,qBAAKC,UAAU,MAAf,SACGD,EAAMI,MAAMC,KAAI,SAACC,GAAD,OACf,cAAC,EAAD,CAAMJ,MAAOI,QAFSN,EAAMO,SA8ErBC,EAtEF,WACX,IAQA,EAAwBC,mBARH,WAEnB,IADA,IAAMC,EAAO,GACJC,EAAI,EAAGA,EAAI,GAAIA,IAAK,CAC3B,IAAIC,EAAMC,MAAMC,KAAK,CAAEC,OAAQ,KAAM,kBAAMC,KAAKC,MAAsB,EAAhBD,KAAKE,aAC3DR,EAAKS,KAAKP,GAEZ,OAAOF,EAEwBU,IAAjC,mBAAOV,EAAP,KAAaW,EAAb,KAYMC,EAAM,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,GAqC1B,OACE,gCACE,8BACGd,EAAKL,KAAI,SAACO,GAAD,OACR,cAAC,EAAD,CAAKR,MAAOQ,SAGhB,wBAAQa,QAhBM,WAChB,IAAMC,EAAWhB,EAAKL,KAAI,SAACO,EAAKe,GAC9B,OAAOf,EAAIP,KAAI,SAACC,EAAMsB,GACpB,OA7Bc,SAAClB,EAAMJ,EAAMqB,EAAQC,GACvC,IAAMC,EAAe,GACK,CACxB,CAAEC,EAAGH,EAAS,EAAGI,EAAGH,EAAU,GAC9B,CAAEE,EAAGH,EAAS,EAAGI,EAAGH,GACpB,CAAEE,EAAGH,EAAS,EAAGI,EAAGH,EAAU,GAC9B,CAAEE,EAAGH,EAAQI,EAAGH,EAAU,GAC1B,CAAEE,EAAGH,EAAQI,EAAGH,EAAU,GAC1B,CAAEE,EAAGH,EAAS,EAAGI,EAAGH,EAAU,GAC9B,CAAEE,EAAGH,EAAS,EAAGI,EAAGH,GACpB,CAAEE,EAAGH,EAAS,EAAGI,EAAGH,EAAU,IAEdI,SAAQ,SAACC,IAxBZ,SAACC,EAAUC,EAAWL,EAAGC,GAExC,QAAYK,IADAF,EAASJ,GACE,CACrB,IAAMxB,EAAO4B,EAASJ,GAAGC,QACZK,IAAT9B,GACF6B,EAAUhB,KAAKb,IAoBjB+B,CAAS3B,EAAMmB,EAAcI,EAAEH,EAAGG,EAAEF,MAEtC,IAAMO,EAAoBT,EAAaU,OAAOjB,GAM9C,OAJ8B,IAAThB,GAAoC,IAAtBgC,GAExB,IAAThC,IAAqC,IAAtBgC,GAAiD,IAAtBA,GAGnC,EACK,EAMHE,CAAY9B,EAAMJ,EAAMqB,EAAQC,SAG3CP,EAAQK,IAUN,sBCnESe,G,MARH,WACV,OACE,+BACE,cAAC,EAAD,QCKSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.d3fb37f1.chunk.js","sourcesContent":["import React from 'react';\nimport './Cell.css';\n\nconst Cell = (props) => {\n  const cell = <div className={`cell ${props.alive ? 'alive' : ''}`} />;\n  return cell;\n};\n\nexport default Cell;\n","import React, { useState } from 'react';\nimport Cell from './Cell';\nimport './Grid.css';\n\nconst Row = (props) => {\n  return (\n    <div className='row' key={props.index}>\n      {props.cells.map((cell) => (\n        <Cell alive={cell} />\n      ))}\n    </div>\n  );\n};\n\nconst Grid = () => {\n  const generateGrid = () => {\n    const grid = [];\n    for (let i = 0; i < 10; i++) {\n      let row = Array.from({ length: 10 }, () => Math.floor(Math.random() * 2));\n      grid.push(row);\n    }\n    return grid;\n  };\n  const [grid, setGrid] = useState(generateGrid());\n\n  const tryToAdd = (inputArr, outputArr, x, y) => {\n    const row = inputArr[x];\n    if (row !== undefined) {\n      const cell = inputArr[x][y];\n      if (cell !== undefined) {\n        outputArr.push(cell);\n      }\n    }\n  };\n\n  const sum = (a, b) => a + b;\n\n  const livesOrDies = (grid, cell, rowIdx, cellIdx) => {\n    const surroundings = [];\n    const possibleNeighbors = [\n      { x: rowIdx - 1, y: cellIdx - 1 },\n      { x: rowIdx - 1, y: cellIdx },\n      { x: rowIdx - 1, y: cellIdx + 1 },\n      { x: rowIdx, y: cellIdx - 1 },\n      { x: rowIdx, y: cellIdx + 1 },\n      { x: rowIdx + 1, y: cellIdx - 1 },\n      { x: rowIdx + 1, y: cellIdx },\n      { x: rowIdx + 1, y: cellIdx + 1 },\n    ];\n    possibleNeighbors.forEach((n) => {\n      tryToAdd(grid, surroundings, n.x, n.y);\n    });\n    const numberOfNeighbors = surroundings.reduce(sum);\n\n    const reproduction = cell === 0 && numberOfNeighbors === 3;\n    const maintains =\n      cell === 1 && (numberOfNeighbors === 3 || numberOfNeighbors === 2);\n\n    if (reproduction || maintains) {\n      return 1;\n    } else return 0;\n  };\n\n  const nextState = () => {\n    const newState = grid.map((row, rowIdx) => {\n      return row.map((cell, cellIdx) => {\n        return livesOrDies(grid, cell, rowIdx, cellIdx);\n      });\n    });\n    setGrid(newState);\n  };\n\n  return (\n    <div>\n      <div>\n        {grid.map((row) => (\n          <Row cells={row} />\n        ))}\n      </div>\n      <button onClick={nextState}>Next</button>\n    </div>\n  );\n};\n\nexport default Grid;\n","import React from 'react';\nimport Grid from './Grid';\nimport './App.css';\n\nconst App = () => {\n  return (\n    <main>\n      <Grid />\n    </main>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}